type Arena @entity {
  id: ID!
  creator: ID!
  firstMover: ArenaPlayer # might not exist right away
  owner: String
  configHash: Bytes! # default: 0, set on ArenaInitialize
  lobbyAddress: ID!
  gameOver: Boolean!
  duration: Int # Set on Gameover
  creationTime: Int!
  creationBlock: Int!
  startTime: Int! # set to creation time by default
  endTime: Int # Set on Gameover
  winners: [ArenaPlayer!]!
  players: [ArenaPlayer!]! # @derivedFrom(field: "arena") # derived fields can't be accessed in the mapping
  planets: [ArenaPlanet!]! @derivedFrom(field: "arena")
  teams: [ArenaTeam!] @derivedFrom(field: "arena")
}

# A unique player entity across all arenas
type Player @entity {
  id: ID!
  wins: Int!
  matches: Int!
  arenaPlayers: [ArenaPlayer!]! @derivedFrom(field: "player")
  configPlayers: [ConfigPlayer!]! @derivedFrom(field: "player")
}

# A unique player entity for each Arena
type ArenaPlayer @entity {
  id: ID! # <arena_address>-<player_address>
  player: Player!
  address: ID!
  homePlanet: ArenaPlanet
  initTimestamp: Int!
  winner: Boolean!
  arena: Arena!
  moves: Int!
  ready: Boolean!
  lastMoveTime: Int!
  lastReadyTime: Int
  team: ArenaTeam # Only created + assigned if team != 0
}

type ArenaTeam @entity {
  id: ID! #<arena_address>-<team#>
  arena: Arena!
  teamId: Int! #number
  players: [ArenaPlayer!]!
  playerAddresses: [String!]!
}
type ConfigTeam @entity {
  id: ID! # <config_hash>-<player1Address>-<player2>...
  configHash: Bytes!
  players: [Player!]!
  gamesStarted: Int!
  gamesFinished: Int!
  wins: Int!
  losses: Int!
  elo: Int!
}

# A unique player entity across arenas w same config
type ConfigPlayer @entity {
  id: ID! # <player_address>-<config_hash>
  address: ID!
  configHash: Bytes!
  player: Player!
  gamesStarted: Int!
  gamesFinished: Int!
  bestTime: Arena # stores the top time
  wins: Int!
  losses: Int!
  elo: Int!
  badge: Badge
  # Non-competitive Badges
}

type Blocklist @entity {
  id: ID!
  destId: String!
  srcId: String!
}

type Badge @entity {
  id: ID!
  configPlayer: ConfigPlayer!
  startYourEngine: Boolean!
  nice: Boolean!
  based: Boolean!
  ouch: Boolean!
}

type ArenaPlanet @entity {
  id: ID!
  arena: Arena!
  locationDec: BigInt!
  locationId: String!
  x: Int! # takes BigInt from chain
  y: Int! # takes BigInt from chain
  perlin: BigInt!
  level: BigInt!
  planetType: PlanetType!
  spaceType: SpaceType!
  targetPlanet: Boolean!
  spawnPlanet: Boolean!
  isEnergyCapBoosted: Boolean!
  isEnergyGrowthBoosted: Boolean!
  isRangeBoosted: Boolean!
  isSpeedBoosted: Boolean!
  isDefenseBoosted: Boolean!
  isSpaceJunkHalved: Boolean!
  captured: Boolean!
  capturer: ArenaPlayer
  blockedPlanetIds: [ArenaPlanet!]!
  blockedPlanetHashes: [String!]!
}

enum PlanetType {
  PLANET
  ASTEROID
  FOUNDRY
  SPACETIME_RIP
  QUASAR
}

enum SpaceType {
  NEBULA
  SPACE
  DEEP_SPACE
  DEAD_SPACE
}
